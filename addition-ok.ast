from ast import *

inline_ast=Module(
body=[Global(
names=['it']), FunctionDef(
name='add', args=arguments(
args=[Name(
id='a', ctx=Param(
)), Name(
id='b', ctx=Param(
))], vararg=None, kwarg=None, defaults=[]), body=[Global(
names=['it']), Assign(
targets=[Name(
id='it', ctx=Store(
))], value=BinOp(
left=Name(
id='a', ctx=Load(
)), op=Add(
), right=Name(
id='b', ctx=Load(
)))), Return(
value=Name(
id='it', ctx=Load(
)))], decorator_list=[]),

Assert(test=Compare(left=Call(func=Name(id='add', ctx=Load()), args=[Num(n=2), Num(n=3)], keywords=[], starargs=None, kwargs=None), ops=[Eq()], comparators=[Num(n=5)]), msg=None),

# py2: Expr(Call(Name('print', Load()), [Str('hi')], [],[],[])),
Expr(Call(Name('print', Load()), [Str('hi')], [])),
# Call(Name('print', Load()), [Name('it', Load())], []),
# Print(None, [Name('it', Load())], True),
# Print(None, [Str('hi')], True)
])
